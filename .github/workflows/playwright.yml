name: Playwright Tests with Allure and Lighthouse
on:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run Playwright tests with 3 shards
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run tests on shard ${{ matrix.shard }}
        run: |
          npx playwright test --shard=${{ matrix.shard }}/3 \
            --reporter=dot,line,allure-playwright
        env:
          CI: true

      - name: Verify Allure results exist
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "‚ùå No Allure results found for shard ${{ matrix.shard }}"
            exit 1
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: ./allure-results
          retention-days: 30

  audit-performance:
    name: Run Lighthouse Audit
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Create Lighthouse directory
        run: mkdir -p ./lighthouse

      - name: Wait for site to be live
        run: |
          echo "‚è≥ Waiting for site to be live..."
          ATTEMPT=0
          MAX_ATTEMPTS=10
          until [ $ATTEMPT -ge $MAX_ATTEMPTS ]; do
            if curl -s --head https://suprimaaldino.github.io/cdcplaywrightlocator/ | grep -E "200|301|302" > /dev/null; then
              echo "‚úÖ Site is live!"
              exit 0
            else
              echo "‚ùå Site not reachable yet, retrying in 30s... ($((ATTEMPT+1))/$MAX_ATTEMPTS)"
              sleep 30
            fi
            ATTEMPT=$((ATTEMPT+1))
          done
          echo "üö® Site did not become live after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Run Lighthouse Audit
        id: lighthouse_audit
        run: |
          echo "üöÄ Starting Lighthouse audit..."
          ATTEMPT=0
          MAX_ATTEMPTS=3
          until [ $ATTEMPT -ge $MAX_ATTEMPTS ]; do
            echo "üîç Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS..."
            if npx lighthouse https://suprimaaldino.github.io/cdcplaywrightlocator/ \
              --output=json,html \
              --output-path=./lighthouse/lighthouse-report \
              --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu" \
              --preset=desktop \
              --quiet \
              --max-wait-for-load=60000 \
              --timeout=120000; then
              echo "‚úÖ Lighthouse audit completed successfully"
              echo "audit_success=true" >> $GITHUB_OUTPUT
              break
            fi
            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "‚è≥ Waiting 15 seconds before retry..."
              sleep 15
            fi
          done

          if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
            echo "‚ùå Lighthouse audit failed after $MAX_ATTEMPTS attempts"
            echo "audit_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create fallback report if needed
        run: |
          if [ ! -f "./lighthouse/lighthouse-report.html" ]; then
            echo "‚ö†Ô∏è Lighthouse report not generated, creating fallback..."
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            cat > ./lighthouse/lighthouse-report.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <title>Lighthouse Audit - Unavailable</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                  .warning { color: #f57c00; font-size: 18px; }
              </style>
          </head>
          <body>
              <h1 class="warning">‚ö†Ô∏è Lighthouse Audit Unavailable</h1>
              <p>The site was unreachable or audit timed out.</p>
              <p>It will be retried in the next run.</p>
              <p><small>Generated: $TIMESTAMP</small></p>
          </body>
          </html>
          EOF
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: ./lighthouse
          retention-days: 30

  merge-allure-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: [test, audit-performance]
    if: always()
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Allure CLI and tools
        run: |
          npm install -g allure-commandline@2.24.0
          sudo apt-get update && sudo apt-get install -y jq

      - name: Clean old results and reports
        run: |
          rm -rf ./allure-results ./allure-report ./lighthouse
          mkdir -p ./allure-results ./lighthouse

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          merge-multiple: true
          path: ./allure-results
        continue-on-error: true

      - name: Download Lighthouse report
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse
        continue-on-error: true

      - name: Check Lighthouse report existence
        id: check_lighthouse
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            mkdir -p ./lighthouse
            cat > ./lighthouse/lighthouse-report.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>Lighthouse Report Missing</title></head>
          <body style="font-family: Arial, sans-serif; text-align: center; margin-top: 50px;">
              <h1 style="color: #f57c00;">‚ö†Ô∏è Lighthouse Report Not Available</h1>
              <p>The Lighthouse audit was not completed for this run.</p>
          </body></html>
          EOF
          fi

      - name: Generate Allure report
        id: generate_allure
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(find ./allure-results -name '*.json' -type f)" ]; then
            echo "‚ùå No test results found. Creating placeholder..."
            mkdir -p ./allure-report
            cat > ./allure-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>No Results</title></head>
          <body style="font-family: Arial, sans-serif; text-align: center; margin-top: 50px;">
              <h1 style="color: red;">‚ùå No test results available</h1>
              <p>Check workflow logs for details.</p>
          </body></html>
          EOF
            echo "allure_generated=false" >> $GITHUB_OUTPUT
          else
            echo "üõ†Ô∏è Generating Allure report..."
            allure generate ./allure-results --clean -o ./allure-report
            echo "allure_generated=true" >> $GITHUB_OUTPUT
          fi

      - name: Embed Lighthouse into Allure
        if: steps.check_lighthouse.outputs.report_exists == 'true'
        run: |
          mkdir -p ./allure-report/lighthouse
          cp ./lighthouse/lighthouse-report.* ./allure-report/lighthouse/ || true
          mkdir -p ./allure-report/plugins
          cat > ./allure-report/plugins/lighthouse-plugin.js << 'EOF'
          window.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.querySelector('.side-nav__brand');
            if (sidebar) {
              const btn = document.createElement('a');
              btn.href = 'lighthouse/lighthouse-report.html';
              btn.target = '_blank';
              btn.textContent = '‚ö° Lighthouse Audit';
              btn.style.cssText = 'display:block; padding:10px; margin:10px 0; background:linear-gradient(135deg,#667eea,#764ba2); color:white; text-align:center; border-radius:5px; text-decoration:none;';
              sidebar.appendChild(btn);
            }
          });
          EOF
          if [ -f "./allure-report/index.html" ]; then
            sed -i 's|</head>|<script src="plugins/lighthouse-plugin.js"></script></head>|' ./allure-report/index.html
          fi
          echo "üéØ Lighthouse embedded successfully"

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
          retention-days: 90

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false
          commit_message: 'Deploy Allure report - ${{ github.sha }}'

      - name: Notify Telegram of CI completion
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üîÑ Preparing Telegram notification..."

          # Get job statuses
          TEST_STATUS="${{ needs.test.result }}"
          DEPLOY_STATUS="${{ job.status }}"

          # Determine emoji and status
          if [ "$TEST_STATUS" == "success" ] && [ "$DEPLOY_STATUS" == "success" ]; then
            EMOJI="‚úÖ"
            STATUS="Passed"
          elif [ "$TEST_STATUS" == "failure" ]; then
            EMOJI="‚ùå"
            STATUS="Failed"
          else
            EMOJI="‚ö†Ô∏è"
            STATUS="Completed with issues"
          fi

          SHORT_SHA="${GITHUB_SHA:0:7}"
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          REPORT_URL="https://suprimaaldino.github.io/cdcplaywrightlocator/"

          MESSAGE="$EMOJI *CI Pipeline $STATUS*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚Ä¢ üß™ Tests: $TEST_STATUS
          ‚Ä¢ üì¶ Deploy: $DEPLOY_STATUS
          ‚Ä¢ üïí $TIMESTAMP
          ‚Ä¢ üîñ \`$SHORT_SHA\`
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìà [View Test Report]($REPORT_URL)
          ‚ö° [View Lighthouse Audit]($REPORT_URL/lighthouse/lighthouse-report.html)
          üîÑ [Workflow Run](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

              echo "üì§ Sending message..."
              echo "$MESSAGE"

              RESPONSE=$(curl -s -X POST \
                "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -H "Content-Type: application/json" \
                -d "{
                  \"chat_id\": \"$TELEGRAM_CHAT_ID\",
                  \"text\": $(echo \"$MESSAGE\" | jq -R -s '.'),
                  \"parse_mode\": \"Markdown\",
                  \"disable_web_page_preview\": false
                }")

              if echo "$RESPONSE" | jq -e '.ok == true' >/dev/null; then
                echo "‚úÖ Telegram notification sent!"
              else
                echo "‚ùå Failed to send Telegram notification"
                echo "Response: $RESPONSE"
              fi

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: merge-allure-reports
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: CHANGELOG.md
          skip-version-file: true
          skip-commit: true
          skip-tag: true
          preset: 'conventionalcommits'

      - name: Check if changelog was updated
        id: check_changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated changelog
        if: steps.check_changes.outputs.updated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog [skip ci]"
          git push

      - name: Notify Telegram - Changelog Updated
        if: steps.check_changes.outputs.updated == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            exit 0
          fi

          MESSAGE="üìù *Changelog Updated*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚Ä¢ Commit: \`${ github.sha:0:7 }\`
          ‚Ä¢ Updated: $(date -u '+%Y-%m-%d %H:%M UTC')
          üîó [View Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"

          curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"$TELEGRAM_CHAT_ID\",
              \"text\": $(echo '$MESSAGE' | jq -R -s '.'),
              \"parse_mode\": \"Markdown\"
            }"