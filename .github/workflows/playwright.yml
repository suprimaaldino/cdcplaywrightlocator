name: Playwright Tests with Allure and Lighthouse

on:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run Playwright tests with 3 shards
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run tests on shard ${{ matrix.shard }}
        run: |
          npx playwright test --shard=${{ matrix.shard }}/3 \
            --reporter=dot,line,allure-playwright
        env:
          CI: true

      - name: Verify Allure results exist
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "‚ùå No Allure results found for shard ${{ matrix.shard }}"
            exit 1
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: ./allure-results
          retention-days: 30

  audit-performance:
    name: Run Lighthouse Audit
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Create Lighthouse directory
        run: mkdir -p ./lighthouse

      - name: Check site availability and run audit
        run: |
          echo "üîç Checking site availability..."
          SITE_REACHABLE=false
          
          # Check site availability
          for i in {1..3}; do
            echo "üîÑ Attempt $i/3..."
            if curl -s --head --max-time 30 https://suprimaaldino.github.io/cdcplaywrightlocator/ | head -n 1 | grep -E "200|301|302"; then
              echo "‚úÖ Site is reachable"
              SITE_REACHABLE=true
              break
            else
              echo "‚ùå Attempt $i failed"
              sleep 10
            fi
          done
          
          # Try Lighthouse audit if site is reachable
          if [ "$SITE_REACHABLE" = "true" ]; then
            echo "üöÄ Starting Lighthouse audit..."
            ATTEMPT=0
            MAX_ATTEMPTS=3
            AUDIT_SUCCESS=false
            
            until [ $ATTEMPT -ge $MAX_ATTEMPTS ]; do
              echo "üîç Lighthouse attempt $((ATTEMPT+1))/$MAX_ATTEMPTS..."
              
              if npx lighthouse https://suprimaaldino.github.io/cdcplaywrightlocator/ \
                --output=json,html \
                --output-path=./lighthouse/lighthouse-report \
                --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu" \
                --preset=desktop \
                --quiet \
                --max-wait-for-load=30000 \
                --timeout=60000; then
                echo "‚úÖ Lighthouse audit completed successfully"
                AUDIT_SUCCESS=true
                break
              fi
              
              ATTEMPT=$((ATTEMPT+1))
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting 15 seconds before retry..."
                sleep 15
              fi
            done
            
            if [ "$AUDIT_SUCCESS" = "false" ]; then
              echo "‚ùå Lighthouse audit failed after $MAX_ATTEMPTS attempts"
            fi
          else
            echo "üö´ Site not reachable, will create fallback report"
          fi

      - name: Verify or create report
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            echo "‚úÖ Lighthouse report available"
            ls -la ./lighthouse/
          else
            echo "‚ö†Ô∏è Lighthouse report not found, creating fallback..."
            cat > ./lighthouse/lighthouse-report.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Lighthouse Audit - Unavailable</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                      max-width: 800px; 
                      margin: 50px auto; 
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  .container {
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      text-align: center;
                  }
                  .warning { color: #f57c00; font-size: 18px; margin-bottom: 20px; }
                  .info { color: #666; line-height: 1.6; }
                  .timestamp { font-size: 12px; color: #999; margin-top: 30px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üîç Lighthouse Audit</h1>
                  <div class="warning">‚ö†Ô∏è Audit Unavailable</div>
                  <div class="info">
                      <p>The Lighthouse performance audit could not be completed at this time.</p>
                      <p><strong>Possible reasons:</strong></p>
                      <ul style="text-align: left; display: inline-block;">
                          <li>Target website is temporarily unavailable</li>
                          <li>Network connectivity issues</li>
                          <li>Site deployment in progress</li>
                          <li>Chrome/Lighthouse timeout</li>
                      </ul>
                      <p>The audit will be retried in the next workflow run.</p>
                  </div>
                  <div class="timestamp">
                      Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')<br>
                      Workflow: ${{ github.workflow }} #${{ github.run_number }}
                  </div>
              </div>
          </body>
          </html>
          EOF
            echo "üìÑ Fallback report created successfully"
            ls -la ./lighthouse/
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: ./lighthouse
          retention-days: 30

  merge-allure-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: [test, audit-performance]
    if: always()
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.0

      - name: Clean old results and reports
        run: |
          rm -rf ./allure-results ./allure-report ./lighthouse
          mkdir -p ./allure-results ./lighthouse

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          merge-multiple: true
          path: ./allure-results
        continue-on-error: true

      - name: Download Lighthouse report
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse
        continue-on-error: true

      - name: Check downloaded artifacts
        run: |
          echo "=== Allure Results ==="
          if [ -d "./allure-results" ]; then
            ALLURE_COUNT=$(find ./allure-results -type f -name "*.json" | wc -l)
            echo "Found $ALLURE_COUNT Allure JSON files"
            ls -la ./allure-results/ | head -10
          else
            echo "No allure-results directory found"
          fi
          
          echo "=== Lighthouse Results ==="
          if [ -d "./lighthouse" ]; then
            ls -la ./lighthouse/
            if [ -f "./lighthouse/lighthouse-report.html" ]; then
              echo "‚úÖ Lighthouse HTML report found"
            else
              echo "‚ö†Ô∏è Lighthouse HTML report missing"
            fi
          else
            echo "No lighthouse directory found"
          fi

      - name: Check Lighthouse report existence
        id: check_lighthouse
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Lighthouse report found"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Lighthouse report not found"
            # Create a simple placeholder if missing
            mkdir -p ./lighthouse
            cat > ./lighthouse/lighthouse-report.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>Lighthouse Report Missing</title></head>
          <body style="font-family: Arial, sans-serif; text-align: center; margin-top: 50px;">
              <h1 style="color: #f57c00;">‚ö†Ô∏è Lighthouse Report Not Available</h1>
              <p>The Lighthouse audit was not completed for this run.</p>
              <p>This can happen if the target site is unavailable or the audit times out.</p>
          </body></html>
          EOF
            echo "report_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Allure report
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(find ./allure-results -name '*.json' -type f)" ]; then
            echo "‚ùå No Allure JSON results found!"
            echo "Creating empty report..."
            mkdir -p ./allure-report
            cat > ./allure-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>No Test Results</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                  .error { color: #d32f2f; font-size: 18px; }
              </style>
          </head>
          <body>
              <h1 class="error">No test results available</h1>
              <p>Tests may have failed to run or results were not generated properly.</p>
              <p>Check the workflow logs for more details.</p>
          </body>
          </html>
          EOF
          else
            echo "üõ†Ô∏è Generating Allure report..."
            allure generate ./allure-results --clean -o ./allure-report
            echo "‚úÖ Allure report generated successfully"
          fi

      - name: Embed Lighthouse report into Allure
        if: steps.check_lighthouse.outputs.report_exists == 'true'
        run: |
          mkdir -p ./allure-report/lighthouse
          cp ./lighthouse/lighthouse-report.* ./allure-report/lighthouse/ 2>/dev/null || true
          echo "üìé Lighthouse report embedded into Allure report"

      - name: Create report summary
        run: |
          echo "## üìä Test Report Summary" > report-summary.md
          echo "" >> report-summary.md
          
          if [ -d "./allure-results" ] && [ -n "$(find ./allure-results -name '*.json' -type f)" ]; then
            echo "‚úÖ Allure report generated successfully" >> report-summary.md
          else
            echo "‚ùå No test results found" >> report-summary.md
          fi
          
          if [ "${{ steps.check_lighthouse.outputs.report_exists }}" == "true" ]; then
            echo "‚úÖ Lighthouse audit completed" >> report-summary.md
          else
            echo "‚ö†Ô∏è Lighthouse audit skipped or failed" >> report-summary.md
          fi
          
          echo "" >> report-summary.md
          echo "üîó [View Full Report](https://suprimaaldino.github.io/cdcplaywrightlocator/)" >> report-summary.md

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
          retention-days: 90

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false
          force_orphan: false
          commit_message: 'Deploy Allure report - ${{ github.sha }}'

      - name: Notify Telegram of CI completion
        if: always() && (vars.TELEGRAM_BOT_TOKEN != '' && vars.TELEGRAM_CHAT_ID != '')
        run: |
          # Determine overall status
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ *Playwright tests passed* üß™"
            EMOJI="üéâ"
          elif [ "${{ needs.test.result }}" == "failure" ]; then
            STATUS="‚ùå *Playwright tests failed* üí•"
            EMOJI="üö®"
          else
            STATUS="‚ö†Ô∏è *Tests completed with warnings* ‚ö°"
            EMOJI="‚ö†Ô∏è"
          fi

          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          REPORT_URL="https://suprimaaldino.github.io/cdcplaywrightlocator/"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          # Build lighthouse status
          if [ "${{ steps.check_lighthouse.outputs.report_exists }}" == "true" ]; then
            LIGHTHOUSE_STATUS="‚úÖ Included"
          else
            LIGHTHOUSE_STATUS="‚ö†Ô∏è Skipped/Failed"
          fi

          MESSAGE=$(cat <<EOF
          $EMOJI $STATUS

          üìã **Test Summary:**
          ‚Ä¢ Commit: \`$SHORT_SHA\`
          ‚Ä¢ Branch: \`${{ github.ref_name }}\`
          ‚Ä¢ Lighthouse: $LIGHTHOUSE_STATUS
          ‚Ä¢ Completed: $TIMESTAMP

          üìä [üìà View Allure Report]($REPORT_URL)
          üîç [üè† Repository](https://github.com/${{ github.repository }})
          EOF
          )

          echo "Sending Telegram notification..."
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
              \"parse_mode\": \"Markdown\",
              \"text\": $(echo "$MESSAGE" | jq -R -s .)
            }" || echo "Failed to send Telegram notification"

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: merge-allure-reports
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: CHANGELOG.md
          skip-version-file: true
          skip-commit: true
          skip-tag: true
          preset: 'conventionalcommits'

      - name: Check if changelog was updated
        id: check_changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "No changelog updates needed"
          else
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "Changelog was updated"
          fi

      - name: Commit updated changelog
        if: steps.check_changes.outputs.updated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog [skip ci]"
          git push