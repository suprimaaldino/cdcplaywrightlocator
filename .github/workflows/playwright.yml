name: Playwright Tests with Allure and Lighthouse

on:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    name: Run Playwright tests with 3 shards
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run tests on shard ${{ matrix.shard }}
        run: |
          npx playwright test --shard=${{ matrix.shard }}/3 \
            --reporter=dot,line,allure-playwright

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: ./allure-results


  audit-performance:
    name: Run Lighthouse Audit
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true  # Jangan hentikan pipeline jika Lighthouse gagal
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Create Lighthouse directory
        run: mkdir -p ./lighthouse

      - name: Run Lighthouse audit
        run: |
          npx lighthouse https://suprimaaldino.github.io/cdcplaywrightlocator/ \
            --output=json,html \
            --output-path=./lighthouse/lighthouse-report \
            --chrome-flags="--headless" \
            --preset=desktop \
            --disable-gatherers=Interactive

      - name: Verify Lighthouse report generated
        run: |
          if [ ! -f "./lighthouse/lighthouse-report.html" ]; then
            echo "‚ö†Ô∏è Lighthouse report failed to generate."
            exit 1
          else
            echo "‚úÖ Lighthouse report generated successfully."
            ls -la ./lighthouse/
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse
          if-no-files-found: warn


  merge-allure-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: [test, audit-performance]
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.0

      - name: Clean old results and reports
        run: rm -rf ./allure-results ./allure-report ./lighthouse

      - name: Backup previous Allure report
        run: |
          if [ -d "./allure-report" ]; then
            echo "Backing up previous report..."
            mv ./allure-report ./allure-report-backup
          fi

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          merge-multiple: true
          path: ./allure-results

      - name: Download Lighthouse report
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse
        if: success() || failure()

      - name: Generate Allure report
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "‚ùå No Allure results found!"
            if [ -d "./allure-report-backup" ]; then
              echo "üîÅ Rolling back to previous report..."
              mv ./allure-report-backup ./allure-report
              exit 0
            else
              echo "üö´ No backup available. Cannot generate report."
              exit 1
            fi
          fi
          echo "üõ†Ô∏è Generating Allure report..."
          allure generate ./allure-results --clean -o ./allure-report

      - name: Embed Lighthouse report into Allure
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            mkdir -p ./allure-report/lighthouse
            cp ./lighthouse/lighthouse-report.html ./allure-report/lighthouse/
            echo "üìé Lighthouse report embedded."
          else
            echo "‚ö†Ô∏è Lighthouse report not found, skipping embed."
          fi

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false    # Hapus file lama ‚Üí hindari cache
          force_orphan: false

      - name: Notify Telegram of CI completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ *Playwright tests passed*"
          else
            STATUS="‚ùå *Playwright tests failed*"
          fi

          if [ -d "./allure-report-backup" ] && [ ! -d "./allure-results" ]; then
            STATUS="‚ö†Ô∏è *Tests failed ‚Äî rolled back to previous report*"
          fi

          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          REPORT_URL="https://suprimaaldino.github.io/cdcplaywrightlocator/"

          MESSAGE=$(cat <<EOF
          $STATUS

          üïë Completed at: $TIMESTAMP
          üìä [View Allure Report]($REPORT_URL)
          üîç Lighthouse audit included in /lighthouse/
          EOF
                    )

                    echo "Sending Telegram notification..."
                    curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                      -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                      -d parse_mode="Markdown" \
                      --data-urlencode "text=$MESSAGE"


  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: merge-allure-reports
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: CHANGELOG.md
          skip-version-file: true
          skip-commit: true
          skip-tag: true

      - name: Commit updated changelog
        run: |
          git config user.name "CI Bot"
          git config user.email "ci@bot.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog [skip ci]"
          git push