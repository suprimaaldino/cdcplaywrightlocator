name: Playwright Tests with Allure and Lighthouse
on:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run Playwright tests with 3 shards
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run tests on shard ${{ matrix.shard }}
        run: |
          npx playwright test --shard=${{ matrix.shard }}/3 \
            --reporter=dot,line,allure-playwright
        env:
          CI: true

      - name: Verify Allure results exist
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "‚ùå No Allure results found for shard ${{ matrix.shard }}"
            exit 1
          fi

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: ./allure-results
          retention-days: 30

      # üö´ NOTIF PER-SHARD DIHAPUS (untuk hindari spam)
      # Biarkan hanya 1 notifikasi utama di akhir

  audit-performance:
    name: Run Lighthouse Audit
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Create Lighthouse directory
        run: mkdir -p ./lighthouse

      - name: Check site availability and run audit
        id: lighthouse_audit
        run: |
          echo "üîç Checking site availability..."
          SITE_REACHABLE=false
          CURRENT_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          AUDIT_SUCCESS=false
          for i in {1..3}; do
            echo "üîÑ Attempt $i/3..."
            if curl -s --head --max-time 30 https://suprimaaldino.github.io/cdcplaywrightlocator/ | head -n 1 | grep -E "200|301|302"; then
              echo "‚úÖ Site is reachable"
              SITE_REACHABLE=true
              break
            else
              echo "‚ùå Attempt $i failed"
              sleep 10
            fi
          done

          if [ "$SITE_REACHABLE" = "true" ]; then
            echo "üöÄ Starting Lighthouse audit..."
            ATTEMPT=0
            MAX_ATTEMPTS=3
            until [ $ATTEMPT -ge $MAX_ATTEMPTS ]; do
              echo "üîç Lighthouse attempt $((ATTEMPT+1))/$MAX_ATTEMPTS..."
              if npx lighthouse https://suprimaaldino.github.io/cdcplaywrightlocator/ \
                --output=json,html \
                --output-path=./lighthouse/lighthouse-report \
                --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu" \
                --preset=desktop \
                --quiet \
                --max-wait-for-load=30000 \
                --timeout=60000; then
                echo "‚úÖ Lighthouse audit completed successfully"
                AUDIT_SUCCESS=true
                echo "audit_success=true" >> $GITHUB_OUTPUT
                break
              fi
              ATTEMPT=$((ATTEMPT+1))
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting 15 seconds before retry..."
                sleep 15
              fi
            done
            if [ "$AUDIT_SUCCESS" = "false" ]; then
              echo "‚ùå Lighthouse audit failed after $MAX_ATTEMPTS attempts"
              echo "audit_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "üö´ Site not reachable, will create fallback report"
            echo "audit_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify or create report
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            echo "‚úÖ Lighthouse report available"
            ls -la ./lighthouse/
          else
            echo "‚ö†Ô∏è Lighthouse report not found, creating fallback..."
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            cat > ./lighthouse/lighthouse-report.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Lighthouse Audit - Unavailable</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
                      max-width: 800px; 
                      margin: 50px auto; 
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  .container {
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      text-align: center;
                  }
                  .warning { color: #f57c00; font-size: 18px; margin-bottom: 20px; }
                  .info { color: #666; line-height: 1.6; }
                  .timestamp { font-size: 12px; color: #999; margin-top: 30px; }
                  .links { margin-top: 30px; }
                  .btn {
                      display: inline-block;
                      padding: 10px 20px;
                      margin: 5px;
                      background: #007AFF;
                      color: white;
                      text-decoration: none;
                      border-radius: 5px;
                      font-weight: 500;
                  }
                  .btn:hover { background: #0056CC; }
                  .btn-secondary { background: #34C759; }
                  .btn-secondary:hover { background: #28A745; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üîç Lighthouse Audit</h1>
                  <div class="warning">‚ö†Ô∏è Audit Unavailable</div>
                  <div class="info">
                      <p>The Lighthouse performance audit could not be completed at this time.</p>
                      <p><strong>Possible reasons:</strong></p>
                      <ul style="text-align: left; display: inline-block;">
                          <li>Target website is temporarily unavailable</li>
                          <li>Network connectivity issues</li>
                          <li>Site deployment in progress</li>
                          <li>Chrome/Lighthouse timeout</li>
                      </ul>
                      <p>The audit will be retried in the next workflow run.</p>
                  </div>
                  <div class="links">
                      <a href="../" class="btn btn-secondary">‚¨ÖÔ∏è Back to Test Report</a>
                      <a href="https://github.com/${{ github.repository }}/actions" class="btn" target="_blank">üîÑ View Workflow</a>
                  </div>
                  <div class="timestamp">
                      Generated: $TIMESTAMP<br>
                      Workflow: ${{ github.workflow }} #${{ github.run_number }}
                  </div>
              </div>
          </body>
          </html>
          EOF
            echo "üìÑ Fallback report created successfully"
            ls -la ./lighthouse/
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: ./lighthouse
          retention-days: 30

  merge-allure-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: [test, audit-performance]
    if: always()
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Allure CLI and tools
        run: |
          npm install -g allure-commandline@2.24.0
          sudo apt-get update && sudo apt-get install -y jq

      - name: Clean old results and reports
        run: |
          rm -rf ./allure-results ./allure-report ./lighthouse
          mkdir -p ./allure-results ./lighthouse

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          merge-multiple: true
          path: ./allure-results
        continue-on-error: true

      - name: Download Lighthouse report
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse
        continue-on-error: true

      - name: Check downloaded artifacts
        run: |
          echo "=== Allure Results ==="
          if [ -d "./allure-results" ]; then
            ALLURE_COUNT=$(find ./allure-results -type f -name "*.json" | wc -l)
            echo "Found $ALLURE_COUNT Allure JSON files"
            ls -la ./allure-results/ | head -10
          else
            echo "No allure-results directory found"
          fi
          echo "=== Lighthouse Results ==="
          if [ -d "./lighthouse" ]; then
            ls -la ./lighthouse/
            if [ -f "./lighthouse/lighthouse-report.html" ]; then
              echo "‚úÖ Lighthouse HTML report found"
            else
              echo "‚ö†Ô∏è Lighthouse HTML report missing"
            fi
          else
            echo "No lighthouse directory found"
          fi

      - name: Check Lighthouse report existence
        id: check_lighthouse
        run: |
          if [ -f "./lighthouse/lighthouse-report.html" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Lighthouse report found"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Lighthouse report not found"
            mkdir -p ./lighthouse
            cat > ./lighthouse/lighthouse-report.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>Lighthouse Report Missing</title></head>
          <body style="font-family: Arial, sans-serif; text-align: center; margin-top: 50px;">
              <h1 style="color: #f57c00;">‚ö†Ô∏è Lighthouse Report Not Available</h1>
              <p>The Lighthouse audit was not completed for this run.</p>
              <p>This can happen if the target site is unavailable or the audit times out.</p>
          </body></html>
          EOF
            echo "report_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Allure report
        id: generate_allure
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(find ./allure-results -name '*.json' -type f)" ]; then
            echo "‚ùå No Allure JSON results found!"
            echo "Creating empty report..."
            mkdir -p ./allure-report
            cat > ./allure-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>No Test Results</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                  .error { color: #d32f2f; font-size: 18px; }
              </style>
          </head>
          <body>
              <h1 class="error">No test results available</h1>
              <p>Tests may have failed to run or results were not generated properly.</p>
              <p>Check the workflow logs for more details.</p>
          </body>
          </html>
          EOF
            echo "allure_generated=false" >> $GITHUB_OUTPUT
          else
            echo "üõ†Ô∏è Generating Allure report..."
            if [ -f "./lighthouse/lighthouse-report.json" ]; then
              echo "üìé Creating Lighthouse attachment for Allure..."
              mkdir -p ./allure-results
              if command -v jq &> /dev/null && [ -f "./lighthouse/lighthouse-report.json" ]; then
                PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "./lighthouse/lighthouse-report.json" 2>/dev/null || echo "0")
                ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "./lighthouse/lighthouse-report.json" 2>/dev/null || echo "0")
                BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "./lighthouse/lighthouse-report.json" 2>/dev/null || echo "0")
                SEO=$(jq -r '.categories.seo.score * 100 | floor' "./lighthouse/lighthouse-report.json" 2>/dev/null || echo "0")
                cat > ./allure-results/lighthouse-metrics.json << EOF
          {
            "uuid": "lighthouse-$(uuidgen)",
            "name": "Lighthouse Performance Audit",
            "fullName": "Performance.Lighthouse.Audit",
            "status": "$( [ "$PERFORMANCE" -ge "80" ] && echo "passed" || echo "failed" )",
            "stage": "finished",
            "start": $(date +%s)000,
            "stop": $(date +%s)000,
            "labels": [
              {"name": "suite", "value": "Performance Tests"},
              {"name": "feature", "value": "Lighthouse Audit"},
              {"name": "story", "value": "Web Performance"}
            ],
            "parameters": [
              {"name": "Performance Score", "value": "$PERFORMANCE%"},
              {"name": "Accessibility Score", "value": "$ACCESSIBILITY%"}, 
              {"name": "Best Practices Score", "value": "$BEST_PRACTICES%"},
              {"name": "SEO Score", "value": "$SEO%"}
            ],
            "attachments": [
              {
                "name": "Lighthouse Report",
                "source": "lighthouse-report.html",
                "type": "text/html"
              }
            ]
          }
          EOF
              fi
            fi
            allure generate ./allure-results --clean -o ./allure-report
            echo "‚úÖ Allure report generated successfully"
            echo "allure_generated=true" >> $GITHUB_OUTPUT
          fi

      - name: Embed Lighthouse report into Allure
        if: steps.check_lighthouse.outputs.report_exists == 'true'
        run: |
          mkdir -p ./allure-report/lighthouse
          cp ./lighthouse/lighthouse-report.* ./allure-report/lighthouse/ 2>/dev/null || true
          mkdir -p ./allure-report/widgets
          cat > ./allure-report/widgets/environment.json << 'EOF'
          {
            "Lighthouse Report": "lighthouse/lighthouse-report.html",
            "Performance Audit": "Available",
            "Report Type": "Integrated"
          }
          EOF
          mkdir -p ./allure-report/plugins
          cat > ./allure-report/plugins/lighthouse-plugin.js << 'EOF'
          window.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.querySelector('.side-nav__brand');
            if (sidebar) {
              const lighthouseBtn = document.createElement('a');
              lighthouseBtn.href = 'lighthouse/lighthouse-report.html';
              lighthouseBtn.target = '_blank';
              lighthouseBtn.innerHTML = '‚ö° Lighthouse Audit';
              lighthouseBtn.style.cssText = `
                display: block;
                padding: 10px 15px;
                margin: 10px 0;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                border-radius: 5px;
                font-weight: 500;
                text-align: center;
                transition: all 0.3s ease;
              `;
              lighthouseBtn.onmouseover = () => lighthouseBtn.style.transform = 'scale(1.02)';
              lighthouseBtn.onmouseout = () => lighthouseBtn.style.transform = 'scale(1)';
              sidebar.appendChild(lighthouseBtn);
            }
          });
          EOF
          if [ -f "./allure-report/index.html" ]; then
            sed -i 's|</head>|<script src="plugins/lighthouse-plugin.js"></script></head>|' ./allure-report/index.html
          fi
          LIGHTHOUSE_JSON="./lighthouse/lighthouse-report.json"
          if [ -f "$LIGHTHOUSE_JSON" ] && command -v jq &> /dev/null; then
            PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            SEO=$(jq -r '.categories.seo.score * 100 | floor' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            FCP=$(jq -r '.audits["first-contentful-paint"].displayValue' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            LCP=$(jq -r '.audits["largest-contentful-paint"].displayValue' "$LIGHTHOUSE_JSON" 2>/dev/null || echo "N/A")
            cat > ./allure-report/widgets/lighthouse-summary.json << EOF
          {
            "uid": "lighthouse-summary",
            "name": "Lighthouse Audit Summary",
            "reportName": "lighthouse-summary",
            "items": [
              { "name": "Performance", "value": "$PERFORMANCE%", "status": "$( [ "$PERFORMANCE" != "N/A" ] && [ "$PERFORMANCE" -ge "90" ] && echo "passed" || echo "failed" )" },
              { "name": "Accessibility", "value": "$ACCESSIBILITY%", "status": "$( [ "$ACCESSIBILITY" != "N/A" ] && [ "$ACCESSIBILITY" -ge "90" ] && echo "passed" || echo "failed" )" },
              { "name": "Best Practices", "value": "$BEST_PRACTICES%", "status": "$( [ "$BEST_PRACTICES" != "N/A" ] && [ "$BEST_PRACTICES" -ge "90" ] && echo "passed" || echo "failed" )" },
              { "name": "SEO", "value": "$SEO%", "status": "$( [ "$SEO" != "N/A" ] && [ "$SEO" -ge "90" ] && echo "passed" || echo "failed" )" },
              { "name": "First Contentful Paint", "value": "$FCP", "status": "unknown" },
              { "name": "Largest Contentful Paint", "value": "$LCP", "status": "unknown" }
            ]
          }
          EOF
          fi
          echo "üéØ Lighthouse report fully integrated into Allure"

      - name: Create report summary
        run: |
          echo "## üìä Test Report Summary" > report-summary.md
          echo "" >> report-summary.md
          if [ "${{ steps.generate_allure.outputs.allure_generated }}" == "true" ]; then
            echo "‚úÖ Allure report generated successfully" >> report-summary.md
          else
            echo "‚ùå No test results found" >> report-summary.md
          fi
          if [ "${{ steps.check_lighthouse.outputs.report_exists }}" == "true" ]; then
            echo "‚úÖ Lighthouse audit completed" >> report-summary.md
          else
            echo "‚ö†Ô∏è Lighthouse audit skipped or failed" >> report-summary.md
          fi
          echo "" >> report-summary.md
          echo "üîó [View Full Report](https://suprimaaldino.github.io/cdcplaywrightlocator/)" >> report-summary.md

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
          retention-days: 90

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false
          force_orphan: false
          commit_message: 'Deploy Allure report - ${{ github.sha }}'

      - name: Notify Telegram of CI completion
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Skip if secrets not set
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ö†Ô∏è Telegram secrets not configured. Skipping notification."
            exit 0
          fi

          echo "üîÑ Preparing final CI status notification..."

          # Get job statuses
          TEST_STATUS="${{ needs.test.result }}"
          DEPLOY_STATUS="${{ job.status }}"

          # Determine emoji and status
          if [ "$TEST_STATUS" == "success" ] && [ "$DEPLOY_STATUS" == "success" ]; then
            EMOJI="‚úÖ"
            STATUS="Passed"
          elif [ "$TEST_STATUS" == "failure" ]; then
            EMOJI="‚ùå"
            STATUS="Failed"
          else
            EMOJI="‚ö†Ô∏è"
            STATUS="Completed with issues"
          fi

          # Build message
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          SHORT_SHA="${GITHUB_SHA:0:7}"
          REPORT_URL="https://suprimaaldino.github.io/cdcplaywrightlocator/"

          MESSAGE="$EMOJI *CI Pipeline $STATUS*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          ‚Ä¢ üß™ Tests: $TEST_STATUS
          ‚Ä¢ üì¶ Deploy: $DEPLOY_STATUS
          ‚Ä¢ üïí $TIMESTAMP
          ‚Ä¢ üîñ \`$SHORT_SHA\`
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          üìà [View Test Report]($REPORT_URL)
          üîÑ [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          echo "üì§ Sending message to Telegram..."
          echo "--- MESSAGE SENT ---"
          echo "$MESSAGE"
          echo "--- END MESSAGE ---"

          # Send to Telegram (safe JSON encoding with jq)
          RESPONSE=$(curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"$TELEGRAM_CHAT_ID\",
              \"text\": $(echo "$MESSAGE" | jq -R -s '.'),
              \"parse_mode\": \"Markdown\",
              \"disable_web_page_preview\": false
            }")

          # Check response
          if echo "$RESPONSE" | jq -e '.ok == true' >/dev/null; then
            echo "‚úÖ Telegram notification sent successfully!"
          else
            echo "‚ùå Failed to send Telegram notification"
            echo "üí¨ Response: $RESPONSE"
          fi