name: Playwright Tests with Allure

on:
  schedule:
    - cron: '0 8 * * *'  
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    name: Run Playwright tests with 3 shards
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run tests on shard ${{ matrix.shard }}
        run: |
          npx playwright test --shard=${{ matrix.shard }}/3 \
            --reporter=dot,line,allure-playwright

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: ./allure-results

  merge-allure-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.0

      - name: Clean old Allure results and reports
        run: rm -rf ./allure-results ./allure-report

      - name: Backup previous Allure report
        run: |
          if [ -d "./allure-report" ]; then
            echo "Backing up existing report..."
            mv ./allure-report ./allure-report-backup
          fi

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-* 
          merge-multiple: true
          path: ./allure-results

      - name: Generate Allure report
        run: |
          if [ ! -d "./allure-results" ]; then
            echo "No allure-results found!"
            echo "Rolling back to previous report..."
            if [ -d "./allure-report-backup" ]; then
              mv ./allure-report-backup ./allure-report
              echo "Rollback complete."
              exit 0
            else
              echo "No backup found. Cannot rollback."
              exit 1
            fi
          fi
          allure generate ./allure-results --clean -o ./allure-report

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      - name: Notify Telegram of CI completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ *Playwright tests passed*"
          else
            STATUS="‚ùå *Playwright tests failed*"
          fi

          if [ -d "./allure-report-backup" ] && [ ! -d "./allure-results" ]; then
            STATUS="‚ö†Ô∏è *Playwright tests failed ‚Äî rolled back to previous report*"
          fi

          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          REPORT_URL="https://suprimaaldino.github.io/cdcplaywrightlocator/"

          MESSAGE=$(cat <<EOF
          $STATUS

          üïí Completed at: $TIMESTAMP  
          üìä [View Allure report]($REPORT_URL)
          EOF
          )

          echo "Sending Telegram notification..."
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            --data-urlencode "text=$MESSAGE"

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: merge-allure-reports
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: CHANGELOG.md
          skip-version-file: true
          skip-commit: true
          skip-tag: true

      - name: üîç Debug changelog content
        run: |
          echo "=== CHANGELOG.md ==="
          cat CHANGELOG.md || echo "CHANGELOG.md not found"
          echo "=== Git Status ==="
          git status

      - name: üßô‚Äç‚ôÇÔ∏è Commit updated changelog if changed
        run: |
          git config user.name "CI Bot"
          git config user.email "ci@bot.com"
          git add CHANGELOG.md

          if git diff --cached --quiet; then
            echo "üõ°Ô∏è No changes to commit. Changelog is up to date."
          else
            git commit -m "docs: update changelog [skip ci]"
            git push
            echo "‚úÖ Changelog committed and pushed."
          fi
